@page "/cherrydown"
@using Blazor.Cherrydown.FileUpload
@using Blazor.Cherrydown.Sample.Components.RadzenWapper
@using Radzen.Blazor

@inject StateContainer _stateContainer;
@inject IConfiguration _config
@inject ILogger<CherrydownEditor> _logger
@implements IDisposable

<PageTitle>CherrydownEditor</PageTitle>

<h3>
    CherrydownEditor- @_markdown!.Substring(0, 10)
</h3>
<button @onclick="ChangeMarkdown">Change Markdown</button>
<button @onclick="SwitchMode">Switch Mode</button>
@* <RadzenButton Text="Save" BusyText="Saving" IsBusy="@_isSaving" ButtonStyle="Radzen.ButtonStyle.Light" Click="SaveMarkdownContent" /> *@

<BusyButton OnSaving="SaveMarkdownContent" />

<Cherrydown @bind-Markdown="@_markdown" OnFileUpload="@SaveFile" AfterInit="AfterInit" @ref="Editor" />

@code {
    private string? _markdown = "# CherrydownEditor";

    private Cherrydown Editor = default!;

    private Timer? _timer;
    private bool _isSaving = false;

    // protected override void OnParametersSet()
    // {
    //     using var reader = new System.IO.StreamReader(@"C:\zzh\Backup\Src\cherry-markdown\examples\markdown\basic.md");
    //     _markdown = reader.ReadToEnd();
    //     base.OnParametersSet();
    // }

    protected override void OnInitialized()
    {
        _timer = new Timer(_ =>
        {
            InvokeAsync(async () =>
            {
                await SaveMarkdownContent();

            });
        }, null, TimeSpan.FromSeconds(10), TimeSpan.FromSeconds(30));

        base.OnInitialized();
    }

    private async Task AfterInit()
    {
        using var reader = new System.IO.StreamReader(@"C:\zzh\Backup\Src\cherry-markdown\examples\markdown\basic.md");
        _markdown = reader.ReadToEnd();
        await Editor.SetValueAsync(_markdown);
    }

    void ChangeMarkdown()
    {
        _markdown = "# Changed Markdown";
    }

    private async Task SaveMarkdownContent()
    {
        try
        {
            _logger.LogWarning("begin saving");
            _isSaving = true;
            _stateContainer.IsSaving = true;

            await Task.Delay(10 * 1000);

            _isSaving = false;
            _stateContainer.IsSaving = false;

            // _markdown = _markdown + "\r\n" + "## Changed";
            _logger.LogWarning("end saving");

            // await InvokeAsync(StateHasChanged);
        }
        catch { }
    }

    async Task SwitchMode()
    {
        await Editor.SwitchModeAsync(CherrydownMode.PreviewOnly);

        await Task.Delay(15 * 1000);

        await Editor.SwitchModeAsync(CherrydownMode.EditAndPreview);
    }

    private async Task<FileUploadResult> SaveFile(FileUpload.IBrowserFile file)
    {
        var workDir = _config.GetValue<string>("WorkDir");
        var workDirVirtualPath = _config.GetValue<string>("WorkDirVirtualPath");

        await using FileStream fs = new(Path.Combine(workDir!, file.Name), FileMode.Create);
        await file.OpenReadStream(15 * 1024 * 1024).CopyToAsync(fs); // 15M

        return new FileUploadResult { FileUri = $"{workDirVirtualPath}/{file.Name}" };
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
